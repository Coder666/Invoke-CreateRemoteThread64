function Invoke-CreateRemoteThread64 
{
    <#
        .SYNOPSIS
            This function will create a remote thread in a 64 bit process, from a WOW64 process
            
            Heavily based on code by Stephen Fewer from the metasploit project
            
            https://github.com/rapid7/metasploit-payloads/tree/master/c/meterpreter/source/common/arch/win/i386
       
        .PARAMETER ProcessHandle
            Uint32 handle to the remote process where the thread will be created

        .PARAMETER ThreadStartRoutine
            Uint32 pointer to the remote memory where you have copied shellcode, or address of remote
            thread entrypoint

        .PARAMETER ThreadParameter
            Uint32 the parameter to pass to the new thread

        .NOTES
            Version:        1.0
            Author:         TomW (Coder666)
        
        .EXAMPLE
            Invoke-CreateRemoteThread64 -ProcessHandle $hProcess -ThreadStartRoutine $pShellcode
            Invoke-CreateRemoteThread64 -ProcessHandle $hProcess -ThreadStartRoutine $pShellcode -Parameter 123

            
    #>

    [CmdletBinding()]
    Param
    (
         [Parameter(Mandatory=$true)]
         [UInt32] $ProcessHandle,
         [Parameter(Mandatory=$true)]
         [UInt32] $ThreadStartRoutine
         [Parameter(Mandatory=$false)]
         [UInt32] $Parameter=0
    )

    Begin
    {
        $assembly = "
        $assembly = [Convert]::FromBase64String($assembly)
        [Reflection.Assembly]::Load($assembly)
        [Thread.Util]::CreateRemoteThread64( $ProcessHandle, $ThreadStartRoutine, $Parameter);
    }
}